/**
 * @fileoverview Firebase Types and Interfaces
 * 
 * TypeScript type definitions for the Badminton App Firebase data structures.
 * Defines interfaces for users, groups, events, voting, and attendance tracking.
 */

/**
 * User document interface representing a user profile in Firestore
 */
export interface UserDoc {
  id: string; // Auth0 sub
  Name: string;
  Email: string;
  Groups: string[]; // Array of group IDs
  Phone: string;
  Address: string;
  PhotoUrl?: string; // URL to the user photo or Base64 encoded image
}

/**
 * Group document interface representing a badminton group in Firestore
 */
export interface GroupDoc {
  id: string; // Optional since it's generated by the function
  Name: string;
  OwnerId: string; // Auth0 sub
  MemberIds: string[]; // Array of Auth0 subs
  Description: string;
  SkillLevel: string;
  Privacy: string;
  HomeCourt: string;
  MeetingSchedule: string;
  PhotoUrl?: string; // URL to the group photo or Base64 encoded image
}

/**
 * Attendance record interface for tracking event attendance
 */
export interface AttendanceRecord {
  userId: string;
  userName: string;
  userEmail: string;
  votedStatus: 'going' | 'maybe' | 'not' | null;
  hasArrived: boolean;
  arrivalTime?: Date;
}

/**
 * Event document interface representing a badminton event in Firestore
 */
export interface EventDoc {
  id: string;
  GroupIDs?: string[]; // Array of group IDs - now optional
  IndividualParticipantIDs?: string[]; // Array of individual user IDs - new field
  Title: string;
  EventDate: Date;
  Location: string;
  CutoffDate?: Date; // Optional - only if voting is enabled
  CreatorID: string;
  VotingEnabled?: boolean; // Optional - defaults to true
  AttendanceRecords?: AttendanceRecord[]; // New field for attendance tracking
  StartedEarly?: boolean; // New field - true if admin started event early
  StartedEarlyAt?: Date; // New field - timestamp when event was started early
  TotalCost?: number; // Optional - total cost for the event
}

export interface VoteDoc {
  userId: string; // Auth0 sub (also used as document ID)
  Status: VoteStatus;
  VotedAt: Date;
}

export interface VoteCountsDoc {
  going: number;
  maybe: number;
  not: number;
  total: number;
  lastUpdated: Date;
}

export interface VoteShard {
  going: number;
  maybe: number;
  not: number;
}

export type VoteStatus = 'going' | 'maybe' | 'not';



export interface newMatchHistory {
  team1: [
    player1Id: string,
    player2Id: string,
    score: number
  ];
  team2: [
    player1Id: string,
    player2Id: string,
    score: number
  ]
  date: Date
  id: string
}

export interface GroupInviteDoc {
  id?: string; // Optional since it's added by the function
  groupId: string;
  inviteCode: string;
  inviteLink: string;
  validUntil: Date;
  maxUses: number;
  expired: boolean;
  used: number;
}


